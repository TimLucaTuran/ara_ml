{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Home"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"fit/","text":"Fit.py This is the main function taking a transmission spectrum as input and producing a metasurface stack as output. Usage Help to all scripts can be revived with the -h option. fit -h : fit.py [-h] [-m MODEL] [-db DATABASE] [-S SMATS] [-i INDEX] [-I] s positional arguments: s path to target spectrum .npy file optional arguments: -h, --help show this help message and exit -m MODEL, --model MODEL path to trained model model -db DATABASE, --database DATABASE sqlite database containing the adresses -S SMATS, --smats SMATS directory containing the smats for interpolation -i INDEX, --index INDEX -I, --interpolate The target spectrum has to be provided as a .npy array of shape L x 2 where L is the number of sampled wavelengths and the 2 contains X - and Y - polarization. The provided model stacker.h5 has been trained on a dataset with L = 160 Source Code [source] SingleLayerInterpolator sasa_stacker.fit.SingleLayerInterpolator(crawler, num_of_neigbours=6, power_faktor=2) This class takes parameters of a single layer meta surface and looks into the database for similar layers which have been simulated. It then interpolates these to get an approximation for the behaviour of a layer with the provided parameters. Arguments crawler : crawler obj. num_of_neigbours : int, how many similar layers should be considered for the interpolation power_faktor : int, exponent for inverse-distance-weight interpolation (IDW) loss sasa_stacker.fit.loss(arr, target_spec, p1, p2, p_stack, bounds, crawler, plotter, sli) This loss function is minimized by the scipy optimizer. It takes all the parameters of a stack, calculates the resulting transmission spectrum and compares it to the target. Additionally it checks if physical bounds are violated and adds params_bounds_distance() to the loss value. Arguments arr : array, the scipy optimizer needs the first argument to be an array with all the tuneable parameters. target_spec : Lx2 array p1 : dict, parameters of layer 1 p2 : dict, parameters of layer 2 p_stack : dict, parameters of the stack bounds : dict, {parameter: [lower bound, upper bound]} crawler : crawler object to access the db plotter : plotter object sli : SingleLayerInterpolator object Returns loss_val : float","title":"Fit"},{"location":"fit/#fitpy","text":"This is the main function taking a transmission spectrum as input and producing a metasurface stack as output.","title":"Fit.py"},{"location":"fit/#usage","text":"Help to all scripts can be revived with the -h option. fit -h : fit.py [-h] [-m MODEL] [-db DATABASE] [-S SMATS] [-i INDEX] [-I] s positional arguments: s path to target spectrum .npy file optional arguments: -h, --help show this help message and exit -m MODEL, --model MODEL path to trained model model -db DATABASE, --database DATABASE sqlite database containing the adresses -S SMATS, --smats SMATS directory containing the smats for interpolation -i INDEX, --index INDEX -I, --interpolate The target spectrum has to be provided as a .npy array of shape L x 2 where L is the number of sampled wavelengths and the 2 contains X - and Y - polarization. The provided model stacker.h5 has been trained on a dataset with L = 160","title":"Usage"},{"location":"fit/#source-code","text":"[source]","title":"Source Code"},{"location":"fit/#singlelayerinterpolator","text":"sasa_stacker.fit.SingleLayerInterpolator(crawler, num_of_neigbours=6, power_faktor=2) This class takes parameters of a single layer meta surface and looks into the database for similar layers which have been simulated. It then interpolates these to get an approximation for the behaviour of a layer with the provided parameters. Arguments crawler : crawler obj. num_of_neigbours : int, how many similar layers should be considered for the interpolation power_faktor : int, exponent for inverse-distance-weight interpolation (IDW)","title":"SingleLayerInterpolator"},{"location":"fit/#loss","text":"sasa_stacker.fit.loss(arr, target_spec, p1, p2, p_stack, bounds, crawler, plotter, sli) This loss function is minimized by the scipy optimizer. It takes all the parameters of a stack, calculates the resulting transmission spectrum and compares it to the target. Additionally it checks if physical bounds are violated and adds params_bounds_distance() to the loss value. Arguments arr : array, the scipy optimizer needs the first argument to be an array with all the tuneable parameters. target_spec : Lx2 array p1 : dict, parameters of layer 1 p2 : dict, parameters of layer 2 p_stack : dict, parameters of the stack bounds : dict, {parameter: [lower bound, upper bound]} crawler : crawler object to access the db plotter : plotter object sli : SingleLayerInterpolator object Returns loss_val : float","title":"loss"},{"location":"test/","text":"This is a test: {{autogenerated}}","title":"Test"},{"location":"test/#this-is-a-test","text":"{{autogenerated}}","title":"This is a test:"}]}